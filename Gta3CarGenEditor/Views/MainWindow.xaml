<Window x:Class="WHampson.Gta3CarGenEditor.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:m="clr-namespace:WHampson.Gta3CarGenEditor.Models"
        xmlns:vm="clr-namespace:WHampson.Gta3CarGenEditor.ViewModels"
        xmlns:conv="clr-namespace:WHampson.Gta3CarGenEditor.Converters"
        xmlns:r="clr-namespace:WHampson.Gta3CarGenEditor.Resources"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="{Binding WindowTitle}"
        Height="550" Width="900"
        Closing="Window_Closing">

    <Window.DataContext>
        <vm:MainViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <!-- VehicleModel enum values -->
        <ObjectDataProvider x:Key="VehicleModelEnumData"
                            MethodName="GetValues"
                            ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="m:VehicleModel"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- Converters -->
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <conv:SpawnCountToBooleanConverter x:Key="SpawnCountToBooleanConverter"/>
        <conv:EnumDescriptionConverter x:Key="EnumDescriptionConverter"/>
        <conv:Vector3dToStringConverter x:Key="Vector3dToStringConverter"/>
    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding Command="{Binding FileOpenCommand}"
                    Key="O" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding FileCloseCommand}"
                    Key="W" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding FileSaveCommand}"
                    Key="S" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding FileSaveAsCommand}"
                    Key="S" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding ImportFromSaveDataCommand}"
                    Key="I" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ImportFromCSVCommand}"
                    Key="I" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding ExportToSaveDataCommand}"
                    Key="E" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ExportToCSVCommand}"
                    Key="E" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding ApplicationExitCommand}"
                    Key="F4" Modifiers="Alt"/>
        <KeyBinding Command="{Binding EditMetadataCommand}"
                    Key="M" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ZeroOutTimersCommand}"
                    Key="T" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ShowUnusedFieldsCommand}"
                    Key="U" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ResetRowOrderCommand}"
                    Key="R" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ShowAboutDialogCommand}"
                    Key="F1"/>
    </Window.InputBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="25"/>
        </Grid.RowDefinitions>

        <DockPanel>
            <!-- Menu bar -->
            <Menu DockPanel.Dock="Top">
                <MenuItem Header="{x:Static r:Strings.MenuHeaderFile}">
                    <MenuItem Command="{Binding FileOpenCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderOpen}"
                              InputGestureText="Ctrl+O"/>
                    <MenuItem Command="{Binding FileCloseCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderClose}"
                              InputGestureText="Ctrl+W"/>
                    <Separator/>
                    <MenuItem Command="{Binding FileSaveCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderSave}"
                              InputGestureText="Ctrl+S"/>
                    <MenuItem Command="{Binding FileSaveAsCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderSaveAs}"
                              InputGestureText="Ctrl+Shift+S"/>
                    <Separator/>
                    <MenuItem Header="{x:Static r:Strings.MenuItemHeaderImport}">
                        <MenuItem Command="{Binding ImportFromSaveDataCommand}"
                                  Header="{x:Static r:Strings.MenuItemHeaderCarGensFromSave}"
                                  InputGestureText="Ctrl+I"/>
                        <MenuItem Command="{Binding ImportFromCSVCommand}"
                                  Header="{x:Static r:Strings.MenuItemHeaderCarGensFromCsv}"
                                  InputGestureText="Ctrl+Shift+I"/>
                    </MenuItem>
                    <MenuItem Header="{x:Static r:Strings.MenuItemHeaderExport}">
                        <MenuItem Command="{Binding ExportToSaveDataCommand}"
                                  Header="{x:Static r:Strings.MenuItemHeaderCarGensToSave}"
                                  InputGestureText="Ctrl+E"/>
                        <MenuItem Command="{Binding ExportToCSVCommand}"
                                  Header="{x:Static r:Strings.MenuItemHeaderCarGensToCsv}"
                                  InputGestureText="Ctrl+Shift+E"/>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Command="{Binding ApplicationExitCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderExit}"
                              InputGestureText="Alt+F4"/>
                </MenuItem>
                <MenuItem Header="{x:Static r:Strings.MenuHeaderEdit}">
                    <MenuItem Command="{Binding EditMetadataCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderEditMetadata}"
                              InputGestureText="Ctrl+M"/>
                    <Separator/>
                    <MenuItem Command="{Binding ZeroOutTimersCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderZeroOutTImers}"
                              InputGestureText="Ctrl+T"/>
                </MenuItem>
                <MenuItem Header="{x:Static r:Strings.MenuHeaderView}">
                    <MenuItem Command="{Binding ShowUnusedFieldsCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderShowUnusedFields}"
                              InputGestureText="Ctrl+U"
                              IsChecked="{Binding IsShowingUnusedFields}"/>
                    <Separator/>
                    <MenuItem Command="{Binding ResetRowOrderCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderResetRowOrder}"
                              InputGestureText="Ctrl+R"/>
                </MenuItem>
                <MenuItem Header="{x:Static r:Strings.MenuHeaderOptions}">
                    <MenuItem Command="{Binding SkipBlockSizeChecksCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderSkipBlockSizeChecks}"
                              IsChecked="{Binding SkipBlockSizeChecks}"/>
                </MenuItem>
                <MenuItem Header="{x:Static r:Strings.MenuHeaderHelp}">
                    <MenuItem Command="{Binding CheckForUpdatesCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderCheckForUpdates}"/>
                    <Separator/>
                    <MenuItem Command="{Binding ShowAboutDialogCommand}"
                              Header="{x:Static r:Strings.MenuItemHeaderAbout}"
                              InputGestureText="F1"/>
                </MenuItem>
            </Menu>

            <!-- Needed to allow for certain columns to be hidden via a button -->
            <FrameworkElement x:Name="ProxyElement" Visibility="Collapsed"/>

            <!-- Car generators table -->
            <DataGrid ItemsSource="{Binding CarGeneratorsList}"
                      AutoGenerateColumns="False"
                      CanUserReorderColumns="False"
                      CanUserSortColumns="True"
                      CanUserAddRows="False"
                      CanUserDeleteRows="False"
                      Name="dataGrid">

                <DataGrid.Columns>
                    <!-- Model ID -->
                    <DataGridTemplateColumn Header="{x:Static r:Strings.ColumnHeaderModelId}" SortMemberPath="Model" CanUserSort="True">
                        <DataGridTemplateColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipModelId}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTemplateColumn.HeaderStyle>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Model, Converter={StaticResource EnumDescriptionConverter}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding Source={StaticResource VehicleModelEnumData}, Mode=OneWay}"
                                          SelectedItem="{Binding Model, UpdateSourceTrigger=PropertyChanged}">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Converter={StaticResource EnumDescriptionConverter}}"/>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>

                    <!-- Location -->
                    <DataGridTemplateColumn Header="{x:Static r:Strings.ColumnHeaderLocation}" CanUserSort="True" SortMemberPath="Location">
                        <DataGridTemplateColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipLocation}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTemplateColumn.HeaderStyle>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Location}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.CellEditingTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding Location, Converter={StaticResource Vector3dToStringConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellEditingTemplate>
                    </DataGridTemplateColumn>

                    <!-- Heading -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderHeading}"
                                        Binding="{Binding Heading, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipHeading}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Color 1 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderColor1}"
                                        Binding="{Binding Color1, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipColor1}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Color 2 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderColor2}"
                                        Binding="{Binding Color2, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipColor2}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Alarm Chance -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderAlarmChance}"
                                        Binding="{Binding AlarmChance, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipAlarmChance}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Locked Chance -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderLockedChance}"
                                        Binding="{Binding LockedChance, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipLockedChance}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Spawn Count -->
                    <DataGridCheckBoxColumn Header="{x:Static r:Strings.ColumnHeaderCanSpawn}"
                                        Binding="{Binding SpawnCount, Converter={StaticResource SpawnCountToBooleanConverter}, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridCheckBoxColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipCanSpawn}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridCheckBoxColumn.HeaderStyle>
                    </DataGridCheckBoxColumn>

                    <!-- Timer -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderTimer}"
                                        Binding="{Binding Timer, UpdateSourceTrigger=PropertyChanged}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipTimer}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Force Spawn -->
                    <DataGridCheckBoxColumn Header="{x:Static r:Strings.ColumnHeaderForceSpawn}"
                                            Binding="{Binding ForceSpawn, UpdateSourceTrigger=PropertyChanged}"
                                            Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridCheckBoxColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipForceSpawn}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridCheckBoxColumn.HeaderStyle>
                    </DataGridCheckBoxColumn>

                    <!-- Min. Spawn Delay -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderMinSpawnDelay}"
                                        Binding="{Binding MinSpawnDelay, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipMinSpawnDelay}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Max. Spawn Delay -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderMaxSpawnDelay}"
                                        Binding="{Binding MaxSpawnDelay, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipMaxSpawnDelay}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Has Recently Been Stolen -->
                    <DataGridCheckBoxColumn Header="{x:Static r:Strings.ColumnHeaderRecentlyStolen}"
                                            Binding="{Binding HasRecentlyBeenStolen, UpdateSourceTrigger=PropertyChanged}"
                                            Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridCheckBoxColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipRecentlyStolen}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridCheckBoxColumn.HeaderStyle>
                    </DataGridCheckBoxColumn>

                    <!-- Unknown24 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown24}"
                                        Binding="{Binding Unknown24, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown2C -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown2C}"
                                        Binding="{Binding Unknown2C, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown30 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown30}"
                                        Binding="{Binding Unknown30, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown34 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown34}"
                                        Binding="{Binding Unknown34, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown38 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown38}"
                                        Binding="{Binding Unknown38, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown3C -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown3C}"
                                        Binding="{Binding Unknown3C, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown40 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown40}"
                                        Binding="{Binding Unknown40, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                    <!-- Unknown44 -->
                    <DataGridTextColumn Header="{x:Static r:Strings.ColumnHeaderUnknown44}"
                                        Binding="{Binding Unknown44, UpdateSourceTrigger=PropertyChanged}"
                                        Visibility="{Binding DataContext.IsShowingUnusedFields, Converter={StaticResource BooleanToVisibilityConverter}, Source={x:Reference ProxyElement}}">
                        <DataGridTextColumn.HeaderStyle>
                            <Style>
                                <Setter Property="ToolTipService.ToolTip"
                                        Value="{x:Static r:Strings.ToolTipUnknown}"/>
                                <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                    </DataGridTextColumn>

                </DataGrid.Columns>
            </DataGrid>
        </DockPanel>

         <!-- Status bar -->
        <StatusBar Grid.Row="1" Background="White">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="75"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="100"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>

            <StatusBarItem Grid.Column="0" HorizontalContentAlignment="Left">
                <TextBlock Text="{Binding StatusText}"/>
            </StatusBarItem>
            <Separator Grid.Column="1"/>

            <StatusBarItem Grid.Column="2" HorizontalContentAlignment="Center">
                <TextBlock Text="{x:Static r:Strings.TextFileModified}"
                           Visibility="{Binding IsFileModified, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </StatusBarItem>
            <Separator Grid.Column="3"/>

            <StatusBarItem Grid.Column="4" HorizontalContentAlignment="Center">
                <TextBlock Text="{Binding CurrentSaveData.FileType, Converter={StaticResource EnumDescriptionConverter}}"
                           Visibility="{Binding IsFileOpen, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </StatusBarItem>

        </StatusBar>
    </Grid>
</Window>
