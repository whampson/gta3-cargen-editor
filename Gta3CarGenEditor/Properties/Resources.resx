<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutDialogTitle" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AppAuthor" xml:space="preserve">
    <value>Created by W. Hampson (a.k.a. thehambone)</value>
  </data>
  <data name="AppCopyright" xml:space="preserve">
    <value>Copyright (C) 2018 W. Hampson. All rights reserved.</value>
  </data>
  <data name="AppDescriptionLong" xml:space="preserve">
    <value>This tool allows you to edit the parked car generators in a GTA3 savegame. You can control the car that spawns, it's location, color, and more! You can also transfer car generators between saves on any platform.</value>
  </data>
  <data name="AppDescriptionShort" xml:space="preserve">
    <value>A simple tool for editing parked car generators in a GTA3 savegame.</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>GTA3 Car Generator Editor</value>
  </data>
  <data name="AppSpecialThanks" xml:space="preserve">
    <value>Special thanks to GTAKid667 for providing feedback and support during development.</value>
  </data>
  <data name="AppVersion" xml:space="preserve">
    <value>Version: {0}</value>
    <comment>{0} = app version and build number (see format below)</comment>
  </data>
  <data name="AppVersionError" xml:space="preserve">
    <value>(not available)</value>
  </data>
  <data name="AppVersionFormat" xml:space="preserve">
    <value>{0} (build {1})</value>
    <comment>{0} = the assembly informational version; {1} = the build number</comment>
  </data>
  <data name="ConvertBackNotSupportedMessage" xml:space="preserve">
    <value>ConvertBack is not supported for this converter.</value>
  </data>
  <data name="CsvFilter" xml:space="preserve">
    <value>CSV (comma-delimited) (*.csv)|*.csv|All Files (*.*)|*.*</value>
  </data>
  <data name="ErrorDialogTitle" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ExportInfoDialogMessage" xml:space="preserve">
    <value>Select the file you want to export the current set of car generators to. The car generators in that file will be overwritten.</value>
  </data>
  <data name="ExportInfoDialogTitle" xml:space="preserve">
    <value>Export Car Generators</value>
  </data>
  <data name="ExportSuccessDialogMessage" xml:space="preserve">
    <value>Car generators exported successfully!</value>
  </data>
  <data name="Gta3SaveDataFilter" xml:space="preserve">
    <value>GTA3 Save Data (*.b)|*.b|All Files (*.*)|*.*</value>
  </data>
  <data name="ImportInfoDialogMessage" xml:space="preserve">
    <value>Select the file you want to import car generators from. The current set of car generators will be overwritten.</value>
  </data>
  <data name="ImportInfoDialogTitle" xml:space="preserve">
    <value>Import Car Generators</value>
  </data>
  <data name="ImportLimitExceededDialogMessage" xml:space="preserve">
    <value>The number of car generators imported exceeds the maximum amount by {0}. The extra car generators will be omitted.</value>
    <comment>{0} = the amount over the limit</comment>
  </data>
  <data name="ImportLimitExceededDialogTitle" xml:space="preserve">
    <value>Import Limit Exceeded</value>
  </data>
  <data name="ImportSuccessDialogMessage" xml:space="preserve">
    <value>Car generators imported successfully!</value>
  </data>
  <data name="IncorrectBlockSizeReadMessage" xml:space="preserve">
    <value>Incorrect block size read.</value>
  </data>
  <data name="IncorrectNumberOfBytesDecodedMessage" xml:space="preserve">
    <value>Incorrect number of bytes decoded.</value>
  </data>
  <data name="IncorrectNumberOfBytesEncodedMessage" xml:space="preserve">
    <value>Incorrect number of bytes encoded.</value>
  </data>
  <data name="InvalidBlockTagMessage" xml:space="preserve">
    <value>Incorrect block tag - '{0}'. Expecting '{1}'.</value>
    <comment>{0} = bad tag; {1} = expected tag</comment>
  </data>
  <data name="InvalidColumnCountMessage" xml:space="preserve">
    <value>Incorrect number of columns read.</value>
  </data>
  <data name="InvalidFileMessage" xml:space="preserve">
    <value>Not a valid GTA3 save data file.</value>
  </data>
  <data name="InvalidModelIdMessage" xml:space="preserve">
    <value>Invalid vehicle model ID ({0}).</value>
    <comment>{0} = the invalid model ID</comment>
  </data>
  <data name="MultipleCallsNotSupportedMessage" xml:space="preserve">
    <value>Multiple calls are not supported.</value>
  </data>
  <data name="OopsMessage" xml:space="preserve">
    <value>You weren't supposed to be able to get here, you know.</value>
  </data>
  <data name="OpenFileDialogTitle" xml:space="preserve">
    <value>Open...</value>
  </data>
  <data name="SaveChangesPromptDialogMessage" xml:space="preserve">
    <value>Do you want to save your changes?</value>
  </data>
  <data name="SaveChangesPromptDialogTitle" xml:space="preserve">
    <value>Save Changes?</value>
  </data>
  <data name="SaveFileAsDialogTitle" xml:space="preserve">
    <value>Save As...</value>
  </data>
  <data name="StatusExportSuccessful" xml:space="preserve">
    <value>Exported car generators to {0}.</value>
    <comment>{0} = path to file written</comment>
  </data>
  <data name="StatusExportUnsuccessful" xml:space="preserve">
    <value>Failed to export car generators!</value>
  </data>
  <data name="StatusFileOpened" xml:space="preserve">
    <value>File opened for edit.</value>
  </data>
  <data name="StatusImportSuccessful" xml:space="preserve">
    <value>Imported car generators from {0}.</value>
    <comment>{0} = path to imported file</comment>
  </data>
  <data name="StatusImportUnsuccessful" xml:space="preserve">
    <value>Failed to import car generators!</value>
  </data>
  <data name="StatusNoFileOpened" xml:space="preserve">
    <value>No file opened.</value>
  </data>
  <data name="StatusSaveSuccessful" xml:space="preserve">
    <value>File saved successfully.</value>
  </data>
  <data name="StatusSaveUnsuccessful" xml:space="preserve">
    <value>Failed to save file!</value>
  </data>
  <data name="SuccesDialogTitle" xml:space="preserve">
    <value>Success</value>
  </data>
</root>